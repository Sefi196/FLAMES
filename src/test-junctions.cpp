#ifndef TEST_JUNCTIONS
#define TEST_JUNCTIONS


#include <vector>
#include <string>
#include <unordered_map>
#include <set>

#include <testthat.h>
#include <Rcpp.h>

#include "test_utilities.h"
#include "classes/StartEndPair.h"
#include "utility/junctions.h"

context("Junctions functions") {
	test_that("take_closest takes the closest") {
		std::vector<int> sample {1,2,3,4,5,8,10,20,30,60,100};
		
		expect_true(take_closest(sample, 6) == 5);
		expect_true(take_closest(sample, 80) == 100);
		expect_true(take_closest(sample, 14) == 10);
	}
	
	test_that("blocks_to_junctions produces correct junctions") {
		std::vector<StartEndPair> blocks {
			{1, 20},
			{30, 100},
			{190, 3938},
			{3999, 23488}
		};

		Junctions juncs = blocks_to_junctions(blocks);
		expect_true(juncs.left == 1);
		expect_true(juncs.right == 23488);
		expect_true(compare_unordered<int>(juncs.junctions, {20, 30, 100, 190, 3938, 3999}));
	}

	test_that("get_gene_blocks produces correct blocks") {
		std::unordered_map<std::string, std::vector<StartEndPair>> gene_dict {
			{"SIRV5", {{1000, 1149}, {1925, 2406}, {1925, 2406}, {1925, 2488}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8585}, {7870, 8585}, {10858, 10991}, {11133, 13606}, {11133, 13606}}},
			{"SIRV4", {{1000, 1346}, {1455, 1885}, {2251, 3403}, {3637, 4103}, {5007, 5158}, {8322, 8372}, {8629, 8990}, {13672, 13937}, {14592, 14623}, {15019, 15122}}},
			{"SIRV7", {{1000, 2675}, {2993, 3111}, {3809, 3896}, {4095, 4179}, {4725, 4810}, {43028, 43077}, {55849, 56097}, {70883, 70987}, {78841, 78963}, {78841, 78963}, {114680, 114988}, {147608, 147957}}},
			{"SIRV6", {{1000, 1186}, {1303, 1381}, {1468, 1950}, {1468, 1950}, {1640, 2120}, {2285, 2620}, {2740, 2828}, {3023, 3164}, {7104, 7448}, {7805, 7923}, {8999, 11108}, {10724, 11837}, {10724, 11837}}},
			{"SIRV1", {{1000, 1484}, {6337, 6813}, {6337, 6813}, {7552, 7814}, {10282, 10366}, {10444, 10791}, {10882, 11242}, {11403, 11643}}},
			{"SIRV3", {{1000, 1167}, {1532, 1764}, {1902, 2005}, {4003, 4080}, {4568, 4779}, {6057, 8292}, {6057, 8292}, {6057, 8292}, {6057, 8292}, {6057, 8292}, {8755, 8975}, {9189, 9324}, {9434, 9943}}},
			{"SIRV2", {{1000, 1661}, {1741, 1853}, {1973, 2064}, {2674, 2802}, {2881, 3010}, {3105, 3374}, {3643, 3825}, {3966, 4479}, {4687, 4800}, {5751, 5911}}}
		};
		std::unordered_map<std::string, std::vector<std::string>> chr_to_gene {
			{"SIRV5", {"SIRV5"}},
			{"SIRV4", {"SIRV4"}},
			{"SIRV7", {"SIRV7"}},
			{"SIRV6", {"SIRV6"}},
			{"SIRV1", {"SIRV1"}},
			{"SIRV3", {"SIRV3"}},
			{"SIRV2", {"SIRV2"}}
		};
		std::unordered_map<std::string, std::vector<std::string>> gene_to_transcript {
			{"SIRV5", {"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"}},
			{"SIRV4", {"SIRV403", "SIRV410", "SIRV406", "SIRV405", "SIRV404", "SIRV409", "SIRV408"}},
			{"SIRV7", {"SIRV708", "SIRV701", "SIRV702", "SIRV703", "SIRV704", "SIRV706"}},
			{"SIRV6", {"SIRV618", "SIRV617", "SIRV601", "SIRV616", "SIRV603", "SIRV602", "SIRV605", "SIRV604", "SIRV607", "SIRV606", "SIRV609", "SIRV608", "SIRV614", "SIRV615", "SIRV612", "SIRV613", "SIRV610", "SIRV611"}},
			{"SIRV1", {"SIRV108", "SIRV109", "SIRV106", "SIRV107", "SIRV105", "SIRV102", "SIRV103", "SIRV101"}},
			{"SIRV3", {"SIRV310", "SIRV311", "SIRV308", "SIRV309", "SIRV304", "SIRV305", "SIRV306", "SIRV307", "SIRV301", "SIRV302", "SIRV303"}},
			{"SIRV2", {"SIRV205", "SIRV204", "SIRV206", "SIRV201", "SIRV203", "SIRV202"}}
		};
		std::unordered_map<std::string, std::vector<GeneBlocks>> chr_to_blocks = get_gene_blocks(&gene_dict, &chr_to_gene, &gene_to_transcript);

		// For these tests, we will only test SIRV5, SIRV3 and SIRV6
		GeneBlocks 
			s5 = chr_to_blocks["SIRV5"][0], 
			s3 = chr_to_blocks["SIRV3"][0],
			s6 = chr_to_blocks["SIRV6"][0];
		// test the contents of transcript_list
		expect_true(compare_unordered<std::string>(s5.transcript_list, std::vector<std::string> {"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"}));
		expect_true(compare_unordered<std::string>(s3.transcript_list, std::vector<std::string> {"SIRV310", "SIRV311", "SIRV308", "SIRV309", "SIRV304", "SIRV305", "SIRV306", "SIRV307", "SIRV301", "SIRV302", "SIRV303"}));
		expect_true(compare_unordered<std::string>(s6.transcript_list, std::vector<std::string> {"SIRV618", "SIRV617", "SIRV601", "SIRV616", "SIRV603", "SIRV602", "SIRV605", "SIRV604", "SIRV607", "SIRV606", "SIRV609", "SIRV608", "SIRV614", "SIRV615", "SIRV612", "SIRV613", "SIRV610", "SIRV611"}));

		// test the contents of gene_to_transcript
		std::map<std::string, std::vector<std::string>> t4 { {"SIRV5", {"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"}} };
		std::map<std::string, std::vector<std::string>> t5 { {"SIRV3", {"SIRV310", "SIRV311", "SIRV308", "SIRV309", "SIRV304", "SIRV305", "SIRV306", "SIRV307", "SIRV301", "SIRV302", "SIRV303"}} };
		std::map<std::string, std::vector<std::string>> t6 { {"SIRV6", {"SIRV618", "SIRV617", "SIRV601", "SIRV616", "SIRV603", "SIRV602", "SIRV605", "SIRV604", "SIRV607", "SIRV606", "SIRV609", "SIRV608", "SIRV614", "SIRV615", "SIRV612", "SIRV613", "SIRV610", "SIRV611"}} };
		expect_true(compare_map(s5.gene_to_transcript, t4));
		expect_true(compare_map(s3.gene_to_transcript, t5));
		expect_true(compare_map(s6.gene_to_transcript, t6));

		// test the start and end positions
		expect_true(s5.start == 1000);
		expect_true(s5.end == 13606);
		expect_true(s3.start == 1000);
		expect_true(s3.end == 9943);
		expect_true(s6.start == 1000);
		expect_true(s6.end == 11837);	
	}

	test_that("correct gene flat is produced") {
		std::unordered_map<std::string, std::vector<std::string>> gene_to_transcript {
			{"SIRV5", {"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"}},
			{"SIRV4", {"SIRV403", "SIRV410", "SIRV406", "SIRV405", "SIRV404", "SIRV409", "SIRV408"}},
			{"SIRV7", {"SIRV708", "SIRV701", "SIRV702", "SIRV703", "SIRV704", "SIRV706"}},
			{"SIRV6", {"SIRV618", "SIRV617", "SIRV601", "SIRV616", "SIRV603", "SIRV602", "SIRV605", "SIRV604", "SIRV607", "SIRV606", "SIRV609", "SIRV608", "SIRV614", "SIRV615", "SIRV612", "SIRV613", "SIRV610", "SIRV611"}},
			{"SIRV1", {"SIRV108", "SIRV109", "SIRV106", "SIRV107", "SIRV105", "SIRV102", "SIRV103", "SIRV101"}},
			{"SIRV3", {"SIRV310", "SIRV311", "SIRV308", "SIRV309", "SIRV304", "SIRV305", "SIRV306", "SIRV307", "SIRV301", "SIRV302", "SIRV303"}},
			{"SIRV2", {"SIRV205", "SIRV204", "SIRV206", "SIRV201", "SIRV203", "SIRV202"}}
		};
		std::unordered_map<std::string, std::vector<StartEndPair>> transcript_to_exon = {
			{"SIRV410", {{1455, 1885}, {2251, 2771}}},
			{"SIRV706", {{56031, 56097}, {70883, 70987}, {78841, 78963}, {114680, 114988}, {147608, 147957}}},
			{"SIRV618", {{2358, 2547}}},
			{"SIRV511", {{1008, 1143}, {1987, 2398}}},
			{"SIRV510", {{1028, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8016}, {8277, 8381}, {8454, 8585}, {10858, 10991}, {11133, 11867}}},
			{"SIRV512", {{2177, 2406}}},
			{"SIRV601", {{1000, 1186}, {1468, 1534}, {1640, 1735}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11826}}},
			{"SIRV616", {{2285, 2620}, {2740, 2814}, {3106, 3164}, {10724, 10788}}},
			{"SIRV603", {{8999, 10968}}},
			{"SIRV509", {{8315, 8381}, {8454, 8585}, {10858, 10991}, {11311, 11866}}},
			{"SIRV605", {{1130, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2026}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11331}}},
			{"SIRV604", {{1087, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2026}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11034, 11108}, {11205, 11837}}},
			{"SIRV607", {{1130, 1186}, {1468, 1735}, {1845, 2026}, {2470, 2540}}},
			{"SIRV606", {{2285, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10788}}},
			{"SIRV609", {{1137, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2120}}},
			{"SIRV608", {{3023, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11270}}},
			{"SIRV702", {{1000, 2675}, {2993, 3111}, {4095, 4179}, {4725, 4810}, {43028, 43077}, {114680, 114916}}},
			{"SIRV703", {{1000, 2675}, {2993, 3111}, {3809, 3896}, {114680, 114988}, {147608, 147918}}},
			{"SIRV704", {{55849, 56097}, {78841, 78963}, {114680, 114738}}},
			{"SIRV614", {{2516, 2620}, {2740, 2828}, {3106, 3164}, {7805, 7923}, {10724, 10815}}},
			{"SIRV311", {{4601, 4762}}},
			{"SIRV310", {{8759, 8966}, {9189, 9324}, {9667, 9914}}},
			{"SIRV615", {{10237, 10818}, {11031, 11108}, {11205, 11330}}},
			{"SIRV705", {{1005, 2675}, {2993, 3111}, {43028, 43077}, {114680, 114988}, {147608, 147925}}},
			{"SIRV701", {{1003, 2675}, {2993, 3111}, {43028, 43077}, {114680, 114988}, {147608, 147923}}},
			{"SIRV613", {{3105, 3164}, {7104, 7448}, {7805, 7923}, {10724, 10818}, {11031, 11108}, {11205, 11824}}},
			{"SIRV610", {{2472, 2620}, {2740, 2828}, {3106, 3164}, {10724, 11108}, {11205, 11690}}},
			{"SIRV611", {{1303, 1381}, {1468, 1534}, {1640, 1950}}},
			{"SIRV403", {{8322, 8372}, {8629, 8990}, {13672, 13828}, {15019, 15122}}},
			{"SIRV508", {{1008, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8381}, {8454, 8585}, {10858, 10991}}},
			{"SIRV501", {{1056, 1149}, {1987, 2033}, {2119, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8016}, {8277, 8381}, {8454, 8585}, {10858, 10991}}},
			{"SIRV406", {{3637, 4103}, {5007, 5158}}},
			{"SIRV405", {{8629, 8990}, {13672, 13937}}},
			{"SIRV404", {{8322, 8372}, {8629, 8990}, {13672, 13822}, {14592, 14623}}},
			{"SIRV502", {{1019, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2488}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8016}, {8277, 8381}, {8454, 8585}, {10858, 10989}}},
			{"SIRV503", {{8201, 8585}, {10858, 10991}, {11133, 11142}}},
			{"SIRV409", {{1000, 1346}, {1678, 1885}, {2389, 3403}}},
			{"SIRV408", {{8323, 8372}, {8629, 8747}, {8846, 8990}, {13672, 13828}, {15019, 15122}}},
			{"SIRV506", {{1008, 1149}, {1987, 2398}}},
			{"SIRV507", {{1027, 1149}, {1925, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3598}}},
			{"SIRV504", {{11133, 13606}}},
			{"SIRV505", {{1000, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8381}, {8454, 8585}, {10858, 10991}}},
			{"SIRV205", {{1108, 1631}}},
			{"SIRV204", {{3643, 3825}, {3966, 4479}, {4687, 4732}}},
			{"SIRV617", {{1544, 1820}}},
			{"SIRV206", {{4033, 4457}}},
			{"SIRV308", {{1000, 1167}, {1532, 1764}, {1902, 1982}}},
			{"SIRV309", {{8797, 8975}, {9189, 9298}, {9434, 9943}}},
			{"SIRV203", {{3665, 3825}, {3966, 4094}, {4338, 4479}, {4687, 4800}, {5751, 5895}}},
			{"SIRV202", {{1035, 1661}, {1741, 1853}, {1973, 2064}, {2674, 2802}, {2881, 3010}, {3105, 3325}, {3665, 3825}, {3966, 4094}, {4338, 4479}, {4687, 4800}, {5788, 5911}}},
			{"SIRV304", {{1963, 2005}, {4003, 4080}, {4568, 4779}, {6057, 6333}, {7270, 7366}, {7872, 7988}, {8124, 8207}, {8755, 8937}}},
			{"SIRV305", {{4003, 4080}, {4568, 4779}, {6570, 6718}}},
			{"SIRV306", {{1944, 2005}, {4003, 4080}, {6057, 8292}}},
			{"SIRV307", {{1963, 2005}, {4003, 4080}, {4574, 4774}, {6057, 6333}, {8755, 8939}}},
			{"SIRV612", {{1087, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2026}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11825}}},
			{"SIRV301", {{1944, 2005}, {4568, 4779}, {6057, 7988}, {8127, 8207}, {8755, 8939}}},
			{"SIRV302", {{1963, 2005}, {6057, 7822}}},
			{"SIRV303", {{1963, 2005}, {4568, 4779}, {6057, 7822}}},
			{"SIRV708", {{56037, 56097}, {70883, 70987}, {78841, 78908}, {78928, 78963}, {114686, 114960}, {147608, 147957}}},
			{"SIRV108", {{10582, 10791}, {10897, 11187}, {11403, 11606}}},
			{"SIRV109", {{10711, 10791}, {10882, 11057}, {11434, 11643}}},
			{"SIRV106", {{1000, 1484}, {7552, 7808}, {10553, 10786}}},
			{"SIRV107", {{10647, 10791}, {10882, 11242}, {11403, 11643}}},
			{"SIRV105", {{6449, 6473}, {6560, 6813}, {7552, 7814}, {10282, 10366}, {10593, 10640}}},
			{"SIRV102", {{1006, 1484}, {6337, 6813}, {7552, 7814}, {10282, 10366}}},
			{"SIRV103", {{1000, 1484}, {6337, 6473}, {6560, 6813}, {7552, 7814}, {10282, 10366}, {10647, 10791}}},
			{"SIRV101", {{1000, 1484}, {6337, 6473}, {6560, 6813}, {7552, 7814}, {10282, 10366}, {10444, 10786}}},
			{"SIRV602", {{1124, 1186}, {1468, 1534}, {1640, 1735}, {2780, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11279}}},
			{"SIRV201", {{1000, 1661}, {1741, 1853}, {1973, 2064}, {2674, 2802}, {2881, 3010}, {3105, 3374}, {3665, 3825}, {3966, 4094}, {4338, 4479}, {4687, 4800}, {5788, 5907}}}
		};

		std::unordered_map<std::string, std::vector<StartEndPair>> gene_flat = get_gene_flat(&gene_to_transcript, &transcript_to_exon);

		// result
		std::unordered_map<std::string, std::vector<StartEndPair>> flat_res = {
			{"SIRV5", {{1000, 1149}, {1925, 2406}, {1925, 2406}, {1925, 2488}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8585}, {7870, 8585}, {10858, 10991}, {11133, 13606}, {11133, 13606}}},
			{"SIRV4", {{1000, 1346}, {1455, 1885}, {2251, 3403}, {3637, 4103}, {5007, 5158}, {8322, 8372}, {8629, 8990}, {13672, 13937}, {14592, 14623}, {15019, 15122}}},
			{"SIRV7", {{1000, 2675}, {2993, 3111}, {3809, 3896}, {4095, 4179}, {4725, 4810}, {43028, 43077}, {55849, 56097}, {70883, 70987}, {78841, 78963}, {78841, 78963}, {114680, 114988}, {147608, 147957}}},
			{"SIRV6", {{1000, 1186}, {1303, 1381}, {1468, 1950}, {1468, 1950}, {1640, 2120}, {2285, 2620}, {2740, 2828}, {3023, 3164}, {7104, 7448}, {7805, 7923}, {8999, 11108}, {10724, 11837}, {10724, 11837}}},
			{"SIRV1", {{1000, 1484}, {6337, 6813}, {6337, 6813}, {7552, 7814}, {10282, 10366}, {10444, 10791}, {10882, 11242}, {11403, 11643}}},
			{"SIRV3", {{1000, 1167}, {1532, 1764}, {1902, 2005}, {4003, 4080}, {4568, 4779}, {6057, 8292}, {6057, 8292}, {6057, 8292}, {6057, 8292}, {6057, 8292}, {8755, 8975}, {9189, 9324}, {9434, 9943}}},
			{"SIRV2", {{1000, 1661}, {1741, 1853}, {1973, 2064}, {2674, 2802}, {2881, 3010}, {3105, 3374}, {3643, 3825}, {3966, 4479}, {4687, 4800}, {5751, 5911}}}
		};

		expect_true(compare_map(flat_res, gene_flat));
		 
	}

	test_that("similar transcripts are correctly removed") {
		std::unordered_map<std::string, std::vector<std::string>> gene_to_transcript {
			{"SIRV5", {"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"}},
			{"SIRV4", {"SIRV403", "SIRV410", "SIRV406", "SIRV405", "SIRV404", "SIRV409", "SIRV408"}},
			{"SIRV7", {"SIRV708", "SIRV701", "SIRV702", "SIRV703", "SIRV704", "SIRV706"}},
			{"SIRV6", {"SIRV618", "SIRV617", "SIRV601", "SIRV616", "SIRV603", "SIRV602", "SIRV605", "SIRV604", "SIRV607", "SIRV606", "SIRV609", "SIRV608", "SIRV614", "SIRV615", "SIRV612", "SIRV613", "SIRV610", "SIRV611"}},
			{"SIRV1", {"SIRV108", "SIRV109", "SIRV106", "SIRV107", "SIRV105", "SIRV102", "SIRV103", "SIRV101"}},
			{"SIRV3", {"SIRV310", "SIRV311", "SIRV308", "SIRV309", "SIRV304", "SIRV305", "SIRV306", "SIRV307", "SIRV301", "SIRV302", "SIRV303"}},
			{"SIRV2", {"SIRV205", "SIRV204", "SIRV206", "SIRV201", "SIRV203", "SIRV202"}}
		};

		std::unordered_map<std::string, std::vector<StartEndPair>> transcript_to_exon {
			{"SIRV410", {{1455, 1885}, {2251, 2771}}},
			{"SIRV706", {{56031, 56097}, {70883, 70987}, {78841, 78963}, {114680, 114988}, {147608, 147957}}},
			{"SIRV618", {{2358, 2547}}},
			{"SIRV511", {{1008, 1143}, {1987, 2398}}},
			{"SIRV510", {{1028, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8016}, {8277, 8381}, {8454, 8585}, {10858, 10991}, {11133, 11867}}},
			{"SIRV512", {{2177, 2406}}},
			{"SIRV601", {{1000, 1186}, {1468, 1534}, {1640, 1735}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11826}}},
			{"SIRV616", {{2285, 2620}, {2740, 2814}, {3106, 3164}, {10724, 10788}}},
			{"SIRV603", {{8999, 10968}}},
			{"SIRV509", {{8315, 8381}, {8454, 8585}, {10858, 10991}, {11311, 11866}}},
			{"SIRV605", {{1130, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2026}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11331}}},
			{"SIRV604", {{1087, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2026}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11034, 11108}, {11205, 11837}}},
			{"SIRV607", {{1130, 1186}, {1468, 1735}, {1845, 2026}, {2470, 2540}}},
			{"SIRV606", {{2285, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10788}}},
			{"SIRV609", {{1137, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2120}}},
			{"SIRV608", {{3023, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11270}}},
			{"SIRV702", {{1000, 2675}, {2993, 3111}, {4095, 4179}, {4725, 4810}, {43028, 43077}, {114680, 114916}}},
			{"SIRV703", {{1000, 2675}, {2993, 3111}, {3809, 3896}, {114680, 114988}, {147608, 147918}}},
			{"SIRV704", {{55849, 56097}, {78841, 78963}, {114680, 114738}}},
			{"SIRV614", {{2516, 2620}, {2740, 2828}, {3106, 3164}, {7805, 7923}, {10724, 10815}}},
			{"SIRV311", {{4601, 4762}}},
			{"SIRV310", {{8759, 8966}, {9189, 9324}, {9667, 9914}}},
			{"SIRV615", {{10237, 10818}, {11031, 11108}, {11205, 11330}}},
			{"SIRV705", {{1005, 2675}, {2993, 3111}, {43028, 43077}, {114680, 114988}, {147608, 147925}}},
			{"SIRV701", {{1003, 2675}, {2993, 3111}, {43028, 43077}, {114680, 114988}, {147608, 147923}}},
			{"SIRV613", {{3105, 3164}, {7104, 7448}, {7805, 7923}, {10724, 10818}, {11031, 11108}, {11205, 11824}}},
			{"SIRV610", {{2472, 2620}, {2740, 2828}, {3106, 3164}, {10724, 11108}, {11205, 11690}}},
			{"SIRV611", {{1303, 1381}, {1468, 1534}, {1640, 1950}}},
			{"SIRV403", {{8322, 8372}, {8629, 8990}, {13672, 13828}, {15019, 15122}}},
			{"SIRV508", {{1008, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8381}, {8454, 8585}, {10858, 10991}}},
			{"SIRV501", {{1056, 1149}, {1987, 2033}, {2119, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8016}, {8277, 8381}, {8454, 8585}, {10858, 10991}}},
			{"SIRV406", {{3637, 4103}, {5007, 5158}}},
			{"SIRV405", {{8629, 8990}, {13672, 13937}}},
			{"SIRV404", {{8322, 8372}, {8629, 8990}, {13672, 13822}, {14592, 14623}}},
			{"SIRV502", {{1019, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2488}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8016}, {8277, 8381}, {8454, 8585}, {10858, 10989}}},
			{"SIRV503", {{8201, 8585}, {10858, 10991}, {11133, 11142}}},
			{"SIRV409", {{1000, 1346}, {1678, 1885}, {2389, 3403}}},
			{"SIRV408", {{8323, 8372}, {8629, 8747}, {8846, 8990}, {13672, 13828}, {15019, 15122}}},
			{"SIRV506", {{1008, 1149}, {1987, 2398}}},
			{"SIRV507", {{1027, 1149}, {1925, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3598}}},
			{"SIRV504", {{11133, 13606}}},
			{"SIRV505", {{1000, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8381}, {8454, 8585}, {10858, 10991}}},
			{"SIRV205", {{1108, 1631}}},
			{"SIRV204", {{3643, 3825}, {3966, 4479}, {4687, 4732}}},
			{"SIRV617", {{1544, 1820}}},
			{"SIRV206", {{4033, 4457}}},
			{"SIRV308", {{1000, 1167}, {1532, 1764}, {1902, 1982}}},
			{"SIRV309", {{8797, 8975}, {9189, 9298}, {9434, 9943}}},
			{"SIRV203", {{3665, 3825}, {3966, 4094}, {4338, 4479}, {4687, 4800}, {5751, 5895}}},
			{"SIRV202", {{1035, 1661}, {1741, 1853}, {1973, 2064}, {2674, 2802}, {2881, 3010}, {3105, 3325}, {3665, 3825}, {3966, 4094}, {4338, 4479}, {4687, 4800}, {5788, 5911}}},
			{"SIRV304", {{1963, 2005}, {4003, 4080}, {4568, 4779}, {6057, 6333}, {7270, 7366}, {7872, 7988}, {8124, 8207}, {8755, 8937}}},
			{"SIRV305", {{4003, 4080}, {4568, 4779}, {6570, 6718}}},
			{"SIRV306", {{1944, 2005}, {4003, 4080}, {6057, 8292}}},
			{"SIRV307", {{1963, 2005}, {4003, 4080}, {4574, 4774}, {6057, 6333}, {8755, 8939}}},
			{"SIRV612", {{1087, 1186}, {1468, 1534}, {1640, 1735}, {1845, 2026}, {2470, 2620}, {2740, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11825}}},
			{"SIRV301", {{1944, 2005}, {4568, 4779}, {6057, 7988}, {8127, 8207}, {8755, 8939}}},
			{"SIRV302", {{1963, 2005}, {6057, 7822}}},
			{"SIRV303", {{1963, 2005}, {4568, 4779}, {6057, 7822}}},
			{"SIRV708", {{56037, 56097}, {70883, 70987}, {78841, 78908}, {78928, 78963}, {114686, 114960}, {147608, 147957}}},
			{"SIRV108", {{10582, 10791}, {10897, 11187}, {11403, 11606}}},
			{"SIRV109", {{10711, 10791}, {10882, 11057}, {11434, 11643}}},
			{"SIRV106", {{1000, 1484}, {7552, 7808}, {10553, 10786}}},
			{"SIRV107", {{10647, 10791}, {10882, 11242}, {11403, 11643}}},
			{"SIRV105", {{6449, 6473}, {6560, 6813}, {7552, 7814}, {10282, 10366}, {10593, 10640}}},
			{"SIRV102", {{1006, 1484}, {6337, 6813}, {7552, 7814}, {10282, 10366}}},
			{"SIRV103", {{1000, 1484}, {6337, 6473}, {6560, 6813}, {7552, 7814}, {10282, 10366}, {10647, 10791}}},
			{"SIRV101", {{1000, 1484}, {6337, 6473}, {6560, 6813}, {7552, 7814}, {10282, 10366}, {10444, 10786}}},
			{"SIRV602", {{1124, 1186}, {1468, 1534}, {1640, 1735}, {2780, 2828}, {3106, 3164}, {10724, 10818}, {11031, 11108}, {11205, 11279}}},
			{"SIRV201", {{1000, 1661}, {1741, 1853}, {1973, 2064}, {2674, 2802}, {2881, 3010}, {3105, 3374}, {3665, 3825}, {3966, 4094}, {4338, 4479}, {4687, 4800}, {5788, 5907}}}
		};

		remove_similar_tr(gene_to_transcript, transcript_to_exon, 10);

		// remove_similar_tr only removes things from gene_to_transcript (first argument)
		std::unordered_map<std::string, std::vector<std::string>> res_gene {
			{"SIRV5", {"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"}}, 
			{"SIRV4", {"SIRV403", "SIRV410", "SIRV406", "SIRV405", "SIRV404", "SIRV409", "SIRV408"}}, 
			{"SIRV7", {"SIRV708", "SIRV701", "SIRV702", "SIRV703", "SIRV704", "SIRV706"}}, 
			{"SIRV6", {"SIRV618", "SIRV617", "SIRV601", "SIRV616", "SIRV603", "SIRV602", "SIRV605", "SIRV604", "SIRV607", "SIRV606", "SIRV609", "SIRV608", "SIRV614", "SIRV615", "SIRV612", "SIRV613", "SIRV610", "SIRV611"}}, 
			{"SIRV1", {"SIRV108", "SIRV109", "SIRV106", "SIRV107", "SIRV105", "SIRV102", "SIRV103", "SIRV101"}}, 
			{"SIRV3", {"SIRV310", "SIRV311", "SIRV308", "SIRV309", "SIRV304", "SIRV305", "SIRV306", "SIRV307", "SIRV301", "SIRV302", "SIRV303"}}, 
			{"SIRV2", {"SIRV205", "SIRV204", "SIRV206", "SIRV201", "SIRV203", "SIRV202"}}
		};

		expect_true(compare_map(res_gene, gene_to_transcript));
	}

	test_that("exons compare correctly") {
		const std::vector<StartEndPair> exon1 {
			{1008, 1149}, {1987, 2033}, {2119, 2156}, {2270, 2315}, {3298, 3404}, {3483, 3643}, {5380, 5450}, {5543, 5626}, {6111, 6169}, {6327, 6452}, {6658, 6722}, {6826, 6957}, {7144, 7307}, {7681, 7762}, {7870, 8381}, {8454, 8585}, {10858, 10991}
		};
		const std::vector<StartEndPair> exon2 {
			{8315, 8381}, {8454, 8585}, {10858, 10991}, {11311, 11866}
		};
		expect_true(!is_exon_similar(exon1, exon2, 10));

		const std::vector<StartEndPair> exon3 {
			{1008, 1149}, {1987, 2398}
		};
		const std::vector<StartEndPair> exon4 {
			{1008, 1143}, {1987, 2398}
		};
		expect_true(is_exon_similar(exon3, exon4, 10));
	}
	// had to comment this chunk out because it wasn't compiling since Junctions is being initialised {right, junctions, left} rather than {left, junctions, right}
	/*
	test_that("splice sites can be aquired") {
		// transcript_to_junctions)
		std::unordered_map<std::string, Junctions> transcript_to_junctions {
			{"SIRV410", {.right = 2771, .junctions = {1885, 2251}, .left = 1455}},
			{"SIRV203", {.right = 5895, .junctions = {3825, 3966, 4094, 4338, 4479, 4687, 4800, 5751}, .left = 3665}},
			{"SIRV408", {.right = 15122, .junctions = {8372, 8629, 8747, 8846, 8990, 13672, 13828, 15019}, .left = 8323}},
			{"SIRV511", {.right = 2398, .junctions = {1143, 1987}, .left = 1008}},
			{"SIRV510", {.right = 11867, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858, 10991, 11133}, .left = 1028}},
			{"SIRV512", {.right = 2406, .junctions = {}, .left = 2177}},
			{"SIRV601", {.right = 11826, .junctions = {1186, 1468, 1534, 1640, 1735, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11031, 11108, 11205}, .left = 1000}},
			{"SIRV304", {.right = 8937, .junctions = {2005, 4003, 4080, 4568, 4779, 6057, 6333, 7270, 7366, 7872, 7988, 8124, 8207, 8755}, .left = 1963}},
			{"SIRV603", {.right = 10968, .junctions = {}, .left = 8999}},
			{"SIRV602", {.right = 11279, .junctions = {1186, 1468, 1534, 1640, 1735, 2780, 2828, 3106, 3164, 10724, 10818, 11031, 11108, 11205}, .left = 1124}},
			{"SIRV605", {.right = 11331, .junctions = {1186, 1468, 1534, 1640, 1735, 1845, 2026, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11031}, .left = 1130}},
			{"SIRV604", {.right = 11837, .junctions = {1186, 1468, 1534, 1640, 1735, 1845, 2026, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11034, 11108, 11205}, .left = 1087}},
			{"SIRV607", {.right = 2540, .junctions = {1186, 1468, 1735, 1845, 2026, 2470}, .left = 1130}},
			{"SIRV606", {.right = 10788, .junctions = {2620, 2740, 2828, 3106, 3164, 10724}, .left = 2285}},
			{"SIRV609", {.right = 2120, .junctions = {1186, 1468, 1534, 1640, 1735, 1845}, .left = 1137}},
			{"SIRV608", {.right = 11270, .junctions = {3164, 10724, 10818, 11031, 11108, 11205}, .left = 3023}},
			{"SIRV702", {.right = 114916, .junctions = {2675, 2993, 3111, 4095, 4179, 4725, 4810, 43028, 43077, 114680}, .left = 1000}},
			{"SIRV703", {.right = 147918, .junctions = {2675, 2993, 3111, 3809, 3896, 114680, 114988, 147608}, .left = 1000}},
			{"SIRV704", {.right = 114738, .junctions = {56097, 78841, 78963, 114680}, .left = 55849}},
			{"SIRV705", {.right = 147925, .junctions = {2675, 2993, 3111, 43028, 43077, 114680, 114988, 147608}, .left = 1005}},
			{"SIRV311", {.right = 4762, .junctions = {}, .left = 4601}},
			{"SIRV310", {.right = 9914, .junctions = {8966, 9189, 9324, 9667}, .left = 8759}},
			{"SIRV307", {.right = 8939, .junctions = {2005, 4003, 4080, 4574, 4774, 6057, 6333, 8755}, .left = 1963}},
			{"SIRV612", {.right = 11825, .junctions = {1186, 1468, 1534, 1640, 1735, 1845, 2026, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11031, 11108, 11205}, .left = 1087}},
			{"SIRV701", {.right = 147923, .junctions = {2675, 2993, 3111, 43028, 43077, 114680, 114988, 147608}, .left = 1003}},
			{"SIRV301", {.right = 8939, .junctions = {2005, 4568, 4779, 6057, 7988, 8127, 8207, 8755}, .left = 1944}},
			{"SIRV706", {.right = 147957, .junctions = {56097, 70883, 70987, 78841, 78963, 114680, 114988, 147608}, .left = 56031}},
			{"SIRV303", {.right = 7822, .junctions = {2005, 4568, 4779, 6057}, .left = 1963}},
			{"SIRV305", {.right = 6718, .junctions = {4080, 4568, 4779, 6570}, .left = 4003}},
			{"SIRV403", {.right = 15122, .junctions = {8372, 8629, 8990, 13672, 13828, 15019}, .left = 8322}},
			{"SIRV508", {.right = 10991, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8381, 8454, 8585, 10858}, .left = 1008}},
			{"SIRV509", {.right = 11866, .junctions = {8381, 8454, 8585, 10858, 10991, 11311}, .left = 8315}},
			{"SIRV406", {.right = 5158, .junctions = {4103, 5007}, .left = 3637}},
			{"SIRV405", {.right = 13937, .junctions = {8990, 13672}, .left = 8629}},
			{"SIRV404", {.right = 14623, .junctions = {8372, 8629, 8990, 13672, 13822, 14592}, .left = 8322}},
			{"SIRV502", {.right = 10989, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2488, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858}, .left = 1019}},
			{"SIRV503", {.right = 11142, .junctions = {8585, 10858, 10991, 11133}, .left = 8201}},
			{"SIRV409", {.right = 3403, .junctions = {1346, 1678, 1885, 2389}, .left = 1000}},
			{"SIRV501", {.right = 10991, .junctions = {1149, 1987, 2033, 2119, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858}, .left = 1056}},
			{"SIRV506", {.right = 2398, .junctions = {1149, 1987}, .left = 1008}},
			{"SIRV507", {.right = 3598, .junctions = {1149, 1925, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483}, .left = 1027}},
			{"SIRV504", {.right = 13606, .junctions = {}, .left = 11133}},
			{"SIRV505", {.right = 10991, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8381, 8454, 8585, 10858}, .left = 1000}},
			{"SIRV205", {.right = 1631, .junctions = {}, .left = 1108}},
			{"SIRV204", {.right = 4732, .junctions = {3825, 3966, 4479, 4687}, .left = 3643}},
			{"SIRV206", {.right = 4457, .junctions = {}, .left = 4033}},
			{"SIRV308", {.right = 1982, .junctions = {1167, 1532, 1764, 1902}, .left = 1000}},
			{"SIRV309", {.right = 9943, .junctions = {8975, 9189, 9298, 9434}, .left = 8797}},
			{"SIRV618", {.right = 2547, .junctions = {}, .left = 2358}},
			{"SIRV202", {.right = 5911, .junctions = {1661, 1741, 1853, 1973, 2064, 2674, 2802, 2881, 3010, 3105, 3325, 3665, 3825, 3966, 4094, 4338, 4479, 4687, 4800, 5788}, .left = 1035}},
			{"SIRV616", {.right = 10788, .junctions = {2620, 2740, 2814, 3106, 3164, 10724}, .left = 2285}},
			{"SIRV617", {.right = 1820, .junctions = {}, .left = 1544}},
			{"SIRV614", {.right = 10815, .junctions = {2620, 2740, 2828, 3106, 3164, 7805, 7923, 10724}, .left = 2516}},
			{"SIRV615", {.right = 11330, .junctions = {10818, 11031, 11108, 11205}, .left = 10237}},
			{"SIRV306", {.right = 8292, .junctions = {2005, 4003, 4080, 6057}, .left = 1944}},
			{"SIRV613", {.right = 11824, .junctions = {3164, 7104, 7448, 7805, 7923, 10724, 10818, 11031, 11108, 11205}, .left = 3105}},
			{"SIRV610", {.right = 11690, .junctions = {2620, 2740, 2828, 3106, 3164, 10724, 11108, 11205}, .left = 2472}},
			{"SIRV611", {.right = 1950, .junctions = {1381, 1468, 1534, 1640}, .left = 1303}},
			{"SIRV708", {.right = 147957, .junctions = {56097, 70883, 70987, 78841, 78908, 78928, 78963, 114686, 114960, 147608}, .left = 56037}},
			{"SIRV108", {.right = 11606, .junctions = {10791, 10897, 11187, 11403}, .left = 10582}},
			{"SIRV302", {.right = 7822, .junctions = {2005, 6057}, .left = 1963}},
			{"SIRV109", {.right = 11643, .junctions = {10791, 10882, 11057, 11434}, .left = 10711}},
			{"SIRV106", {.right = 10786, .junctions = {1484, 7552, 7808, 10553}, .left = 1000}},
			{"SIRV107", {.right = 11643, .junctions = {10791, 10882, 11242, 11403}, .left = 10647}},
			{"SIRV105", {.right = 10640, .junctions = {6473, 6560, 6813, 7552, 7814, 10282, 10366, 10593}, .left = 6449}},
			{"SIRV102", {.right = 10366, .junctions = {1484, 6337, 6813, 7552, 7814, 10282}, .left = 1006}},
			{"SIRV103", {.right = 10791, .junctions = {1484, 6337, 6473, 6560, 6813, 7552, 7814, 10282, 10366, 10647}, .left = 1000}},
			{"SIRV101", {.right = 10786, .junctions = {1484, 6337, 6473, 6560, 6813, 7552, 7814, 10282, 10366, 10444}, .left = 1000}},
			{"SIRV201", {.right = 5907, .junctions = {1661, 1741, 1853, 1973, 2064, 2674, 2802, 2881, 3010, 3105, 3374, 3665, 3825, 3966, 4094, 4338, 4479, 4687, 4800, 5788}, .left = 1000}}
		};

		std::vector<std::string> tr_list {
			"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"
		};

		std::set<int> out_site = get_splice_site(transcript_to_junctions, tr_list);

		std::set<int> real_site {
			1149, 1925, 1987, 2033, 2119, 2156, 2270, 2315, 2488, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858, 10991, 11133, 11311
		};

		expect_true(compare_stream(real_site, out_site));
	}
	*/
}

// [[Rcpp::export]]
void what() {
	// had to comment this chunk out because it wasn't compiling since Junctions is being initialised {right, junctions, left} rather than {left, junctions, right}
	/*
	std::unordered_map<std::string, Junctions> transcript_to_junctions {
		{"SIRV410", {.right = 2771, .junctions = {1885, 2251}, .left = 1455}},
		{"SIRV203", {.right = 5895, .junctions = {3825, 3966, 4094, 4338, 4479, 4687, 4800, 5751}, .left = 3665}},
		{"SIRV408", {.right = 15122, .junctions = {8372, 8629, 8747, 8846, 8990, 13672, 13828, 15019}, .left = 8323}},
		{"SIRV511", {.right = 2398, .junctions = {1143, 1987}, .left = 1008}},
		{"SIRV510", {.right = 11867, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858, 10991, 11133}, .left = 1028}},
		{"SIRV512", {.right = 2406, .junctions = {}, .left = 2177}},
		{"SIRV601", {.right = 11826, .junctions = {1186, 1468, 1534, 1640, 1735, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11031, 11108, 11205}, .left = 1000}},
		{"SIRV304", {.right = 8937, .junctions = {2005, 4003, 4080, 4568, 4779, 6057, 6333, 7270, 7366, 7872, 7988, 8124, 8207, 8755}, .left = 1963}},
		{"SIRV603", {.right = 10968, .junctions = {}, .left = 8999}},
		{"SIRV602", {.right = 11279, .junctions = {1186, 1468, 1534, 1640, 1735, 2780, 2828, 3106, 3164, 10724, 10818, 11031, 11108, 11205}, .left = 1124}},
		{"SIRV605", {.right = 11331, .junctions = {1186, 1468, 1534, 1640, 1735, 1845, 2026, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11031}, .left = 1130}},
		{"SIRV604", {.right = 11837, .junctions = {1186, 1468, 1534, 1640, 1735, 1845, 2026, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11034, 11108, 11205}, .left = 1087}},
		{"SIRV607", {.right = 2540, .junctions = {1186, 1468, 1735, 1845, 2026, 2470}, .left = 1130}},
		{"SIRV606", {.right = 10788, .junctions = {2620, 2740, 2828, 3106, 3164, 10724}, .left = 2285}},
		{"SIRV609", {.right = 2120, .junctions = {1186, 1468, 1534, 1640, 1735, 1845}, .left = 1137}},
		{"SIRV608", {.right = 11270, .junctions = {3164, 10724, 10818, 11031, 11108, 11205}, .left = 3023}},
		{"SIRV702", {.right = 114916, .junctions = {2675, 2993, 3111, 4095, 4179, 4725, 4810, 43028, 43077, 114680}, .left = 1000}},
		{"SIRV703", {.right = 147918, .junctions = {2675, 2993, 3111, 3809, 3896, 114680, 114988, 147608}, .left = 1000}},
		{"SIRV704", {.right = 114738, .junctions = {56097, 78841, 78963, 114680}, .left = 55849}},
		{"SIRV705", {.right = 147925, .junctions = {2675, 2993, 3111, 43028, 43077, 114680, 114988, 147608}, .left = 1005}},
		{"SIRV311", {.right = 4762, .junctions = {}, .left = 4601}},
		{"SIRV310", {.right = 9914, .junctions = {8966, 9189, 9324, 9667}, .left = 8759}},
		{"SIRV307", {.right = 8939, .junctions = {2005, 4003, 4080, 4574, 4774, 6057, 6333, 8755}, .left = 1963}},
		{"SIRV612", {.right = 11825, .junctions = {1186, 1468, 1534, 1640, 1735, 1845, 2026, 2470, 2620, 2740, 2828, 3106, 3164, 10724, 10818, 11031, 11108, 11205}, .left = 1087}},
		{"SIRV701", {.right = 147923, .junctions = {2675, 2993, 3111, 43028, 43077, 114680, 114988, 147608}, .left = 1003}},
		{"SIRV301", {.right = 8939, .junctions = {2005, 4568, 4779, 6057, 7988, 8127, 8207, 8755}, .left = 1944}},
		{"SIRV706", {.right = 147957, .junctions = {56097, 70883, 70987, 78841, 78963, 114680, 114988, 147608}, .left = 56031}},
		{"SIRV303", {.right = 7822, .junctions = {2005, 4568, 4779, 6057}, .left = 1963}},
		{"SIRV305", {.right = 6718, .junctions = {4080, 4568, 4779, 6570}, .left = 4003}},
		{"SIRV403", {.right = 15122, .junctions = {8372, 8629, 8990, 13672, 13828, 15019}, .left = 8322}},
		{"SIRV508", {.right = 10991, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8381, 8454, 8585, 10858}, .left = 1008}},
		{"SIRV509", {.right = 11866, .junctions = {8381, 8454, 8585, 10858, 10991, 11311}, .left = 8315}},
		{"SIRV406", {.right = 5158, .junctions = {4103, 5007}, .left = 3637}},
		{"SIRV405", {.right = 13937, .junctions = {8990, 13672}, .left = 8629}},
		{"SIRV404", {.right = 14623, .junctions = {8372, 8629, 8990, 13672, 13822, 14592}, .left = 8322}},
		{"SIRV502", {.right = 10989, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2488, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858}, .left = 1019}},
		{"SIRV503", {.right = 11142, .junctions = {8585, 10858, 10991, 11133}, .left = 8201}},
		{"SIRV409", {.right = 3403, .junctions = {1346, 1678, 1885, 2389}, .left = 1000}},
		{"SIRV501", {.right = 10991, .junctions = {1149, 1987, 2033, 2119, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858}, .left = 1056}},
		{"SIRV506", {.right = 2398, .junctions = {1149, 1987}, .left = 1008}},
		{"SIRV507", {.right = 3598, .junctions = {1149, 1925, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483}, .left = 1027}},
		{"SIRV504", {.right = 13606, .junctions = {}, .left = 11133}},
		{"SIRV505", {.right = 10991, .junctions = {1149, 1987, 2033, 2119, 2156, 2270, 2315, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8381, 8454, 8585, 10858}, .left = 1000}},
		{"SIRV205", {.right = 1631, .junctions = {}, .left = 1108}},
		{"SIRV204", {.right = 4732, .junctions = {3825, 3966, 4479, 4687}, .left = 3643}},
		{"SIRV206", {.right = 4457, .junctions = {}, .left = 4033}},
		{"SIRV308", {.right = 1982, .junctions = {1167, 1532, 1764, 1902}, .left = 1000}},
		{"SIRV309", {.right = 9943, .junctions = {8975, 9189, 9298, 9434}, .left = 8797}},
		{"SIRV618", {.right = 2547, .junctions = {}, .left = 2358}},
		{"SIRV202", {.right = 5911, .junctions = {1661, 1741, 1853, 1973, 2064, 2674, 2802, 2881, 3010, 3105, 3325, 3665, 3825, 3966, 4094, 4338, 4479, 4687, 4800, 5788}, .left = 1035}},
		{"SIRV616", {.right = 10788, .junctions = {2620, 2740, 2814, 3106, 3164, 10724}, .left = 2285}},
		{"SIRV617", {.right = 1820, .junctions = {}, .left = 1544}},
		{"SIRV614", {.right = 10815, .junctions = {2620, 2740, 2828, 3106, 3164, 7805, 7923, 10724}, .left = 2516}},
		{"SIRV615", {.right = 11330, .junctions = {10818, 11031, 11108, 11205}, .left = 10237}},
		{"SIRV306", {.right = 8292, .junctions = {2005, 4003, 4080, 6057}, .left = 1944}},
		{"SIRV613", {.right = 11824, .junctions = {3164, 7104, 7448, 7805, 7923, 10724, 10818, 11031, 11108, 11205}, .left = 3105}},
		{"SIRV610", {.right = 11690, .junctions = {2620, 2740, 2828, 3106, 3164, 10724, 11108, 11205}, .left = 2472}},
		{"SIRV611", {.right = 1950, .junctions = {1381, 1468, 1534, 1640}, .left = 1303}},
		{"SIRV708", {.right = 147957, .junctions = {56097, 70883, 70987, 78841, 78908, 78928, 78963, 114686, 114960, 147608}, .left = 56037}},
		{"SIRV108", {.right = 11606, .junctions = {10791, 10897, 11187, 11403}, .left = 10582}},
		{"SIRV302", {.right = 7822, .junctions = {2005, 6057}, .left = 1963}},
		{"SIRV109", {.right = 11643, .junctions = {10791, 10882, 11057, 11434}, .left = 10711}},
		{"SIRV106", {.right = 10786, .junctions = {1484, 7552, 7808, 10553}, .left = 1000}},
		{"SIRV107", {.right = 11643, .junctions = {10791, 10882, 11242, 11403}, .left = 10647}},
		{"SIRV105", {.right = 10640, .junctions = {6473, 6560, 6813, 7552, 7814, 10282, 10366, 10593}, .left = 6449}},
		{"SIRV102", {.right = 10366, .junctions = {1484, 6337, 6813, 7552, 7814, 10282}, .left = 1006}},
		{"SIRV103", {.right = 10791, .junctions = {1484, 6337, 6473, 6560, 6813, 7552, 7814, 10282, 10366, 10647}, .left = 1000}},
		{"SIRV101", {.right = 10786, .junctions = {1484, 6337, 6473, 6560, 6813, 7552, 7814, 10282, 10366, 10444}, .left = 1000}},
		{"SIRV201", {.right = 5907, .junctions = {1661, 1741, 1853, 1973, 2064, 2674, 2802, 2881, 3010, 3105, 3374, 3665, 3825, 3966, 4094, 4338, 4479, 4687, 4800, 5788}, .left = 1000}}
	};
	
	std::vector<std::string> tr_list {
		"SIRV508", "SIRV509", "SIRV502", "SIRV503", "SIRV501", "SIRV506", "SIRV507", "SIRV504", "SIRV505", "SIRV512", "SIRV510"
	};

	std::set<int> out_site = get_splice_site(transcript_to_junctions, tr_list);

	std::set<int> real_site {
		1149, 1925, 1987, 2033, 2119, 2156, 2270, 2315, 2488, 3298, 3404, 3483, 3643, 5380, 5450, 5543, 5626, 6111, 6169, 6327, 6452, 6658, 6722, 6826, 6957, 7144, 7307, 7681, 7762, 7870, 8016, 8277, 8381, 8454, 8585, 10858, 10991, 11133, 11311
	};

	Rcpp::Rcout << "Out_Site:   Real_Site\n";
	for (auto i = out_site.begin(), j = real_site.begin(); i != out_site.end(); i++, j++) {
		Rcpp::Rcout << *i << "\t:\t" << *j << "\n";
	}

	*/
}

#endif