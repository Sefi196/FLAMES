#include <string>
#include <vector>
#include <unordered_map>
#include <fstream>
#include <testthat.h>

#include "test_utilities.h"
#include "classes/BamRecord.h"
#include "classes/StartEndPair.h"
#include "classes/DataStruct.h"
#include "main-functions/group_bam2isoform.h"

static int
fetch_function(const bam1_t *b, void *data)
{
    DataStruct * data_struct = (DataStruct*)data;

    std::vector<BAMRecord> * records = data_struct->records;
    bam_header_t * header = data_struct->header;

    BAMRecord rec = read_record(b, header);
    records->push_back(rec);
	return 0;
}

context("Group BAM 2 Isoform") {


	test_that("get_blocks produces correct blocks") {
		// initial test of single position
		// dataset provided by https://github.com/brainstorm/tiny-test-data
		std::string bamIn = get_extdata("Test1-ready.bam");
		bamFile bam = bam_open(bamIn.c_str(), "r");
		bam_index_t *bam_index = bam_index_load(bamIn.c_str());
		bam_header_t *header = bam_header_read(bam);
		int tid = bam_get_tid(header, "chrM");

		// fetch qname ERR032227.10543296
		std::vector<BAMRecord> records;
		DataStruct data = {header, &records};
		bam_fetch(bam, bam_index, tid, 7000, 7008, &data, fetch_function);
		// sanity check
		expect_true(records.size() == 1);
		std::vector<StartEndPair> blk = get_blocks(records[0]);
		expect_true(blk.size() == 1);
		expect_true(blk[0] == (StartEndPair {7007, 7083}));


		// a check with 409 reads
		std::vector<BAMRecord> recs;
		DataStruct data2 = {header, &recs};
		bam_fetch(bam, bam_index, tid, 7000, 7025, &data2, fetch_function);
		bam_close(bam);	

		// the real values of blocks
		std::vector<std::vector<StartEndPair>> res_blocks {
			{ StartEndPair {7007, 7083} }, 
			{ StartEndPair {7009, 7085} }, 
			{ StartEndPair {7009, 7085} }, 
			{ StartEndPair {7010, 7086} }, 
			{ StartEndPair {7010, 7086} }, 
			{ StartEndPair {7010, 7086} }, 
			{ StartEndPair {7011, 7087} }, 
			{ StartEndPair {7011, 7087} }, 
			{ StartEndPair {7012, 7088} }, 
			{ StartEndPair {7012, 7088} }, 
			{ StartEndPair {7012, 7088} }, 
			{ StartEndPair {7014, 7090} }, 
			{ StartEndPair {7014, 7090} }, 
			{ StartEndPair {7014, 7090} }, 
			{ StartEndPair {7015, 7091} }, 
			{ StartEndPair {7015, 7091} }, 
			{ StartEndPair {7015, 7091} }, 
			{ StartEndPair {7015, 7091} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7016, 7092} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7017, 7093} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7018, 7094} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7019, 7095} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7020, 7096} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7021, 7097} }, 
			{ StartEndPair {7022, 7098} }, 
			{ StartEndPair {7022, 7098} }, 
			{ StartEndPair {7022, 7098} }, 
			{ StartEndPair {7022, 7098} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7077}, StartEndPair {7077, 7097} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7023, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7096} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7098} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7098} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7099} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }, 
			{ StartEndPair {7024, 7100} }
		};

		std::vector<std::vector<StartEndPair>> rec_blocks = map<BAMRecord, std::vector<StartEndPair>>(recs, [](const BAMRecord &b) { return get_blocks(b); });
	
		expect_true(res_blocks.size() == rec_blocks.size());
		for (int i = 0; i < res_blocks.size(); i++) {
			expect_true(compare_stream(res_blocks[i], rec_blocks[i]));
		}
	}

	// test_that("group_bam2isoform successfully acquires BAM entries") {
	// 	std::string bamIn = get_extdata("Test1-ready.bam");
	// 			BEFORE WE TEST THIS WE NEED TO TEST ISOFORM CLASS AND GET_TSS_TES_SITE
	// }
}

// [[Rcpp::export]]
void what2() {
	return;
}	