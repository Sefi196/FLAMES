#include <testthat.h>
#include <string>
#include <vector>
#include <unordered_map>

#include "test_utilities.h"
#include "file-handling/gff3_to_fa.h"

context("GFF3 and FA parsing and conversion") {
	test_that("FASTA file can be processed") {
		std::string fa_file = get_extdata("SIRV_genomefa.fasta");

		std::unordered_map<std::string, std::string> fasta = 
			get_fa_simple(fa_file);
		
		expect_true(fasta.size() == 7);

		// need to check all fasta qnames
		std::vector<std::string> real_qnames {
			"SIRV1", "SIRV2", "SIRV3", "SIRV4", "SIRV5", "SIRV6", "SIRV7"
		};
		
		std::vector<std::string> qnames;
		for (const auto &[qname, seq] : fasta) {
			qnames.push_back(qname);
		}

		expect_true(compare_unordered(real_qnames, qnames));

		// just compare one sequence for correctness (too many bases to compare more)
		std::string SIRV2seq = "TTTATCTTGCGTATGGGCCTACGCTACTTACACGATACCTGGTATTCGTAATGGTCTTACCAAGCGTCTGCTGAAACGGTATTCCGAGGCGCTGCGTTAAATCGCTATGGTGTGGTTGTTCTCATTAGTCGGCAAAGAGACAATTATAGCGGCTAGGAACGCAACTAGTTATAACGAACGGCCTCGAATAGTAGAAAATATCCCTCCTCCGGGCACCTCCTGAAATGCCACATATTCGGGTTATTGAAGGCGGTTACCACGGCAGTTTTATCCAGCCTCATAGGTCTTTATTCCGGGGTTACTCTTACCGGCTGTGACGCGTCGTGTCCCGGCTTTGAGTGCGATACCACCGGATTGTCTGGCTTGGTTCACCTTTTGGATTCCTCATCGGGTTATACTAACTGACACTTATTCTTTAAGTAAGGACCCCTTATTGGCAGTGGTGAGTGAGATTTGGCACTATCCTTATTACTGATGATCTTACCCCTGTCGCATGAATTACAGTACGAGCTTACTTTACCAGGATACCACTTGATCTTGTGGAGGATACTCTTCCAATTCTTGAACTGGACCCACAGAGATGAGTGTACTAGATGGGCGTACGCATTATGTGCCCAGTTGTATAATTGTGTGTTTTCAAGGAAGGAGGTATGCGTCAATACGTTCAGTATCGACATAAGGTATTTGGATAGTTTCAGTGACATAGACCAATAGATTCCAGATCTCCTTACGCATCAGTAAATACCTTTATAGAGTCGATTCACATCAACGCCATTTTACACACATCGCCGACGACAAAAGGGCTGAAAGTGGCACTCTACTAATTTGTTCATGTGTGAACAATAAACAATATTCGAGTACACGTTGATGGGATAGTGCTCTCGCCAGGCCGTCCACTTCGTAATTATCCTTTGAGTAGTGCAGGCGCATTAATTTAGCATGTGGCCAGCATCTTAGCGTGAAGCGATGGTCAAATTGTACGCATGCCACGTTGGGATGTCAATCTGGCAGATTAGATACAGCTATAGAGCGAATCACCACGTCTCCTTAGATAACTGGCAAATCTTCACAATTACGCAAGACCATAGAATAGTCCTAAGCAACATTTGCCGCATCGACCAAATCATGGCTTTGCACTCCAACTTTGCCTGAATCGTGTCAGACTATAGCGGGACGTTCGACCATACTACTCATTCGATTACGCATTCACCTGACGAGAATAGCCATTCTTCCTGAACATACGTTAGAAGTAGTTGGTTAATGCTTGTCTACATTTGAGTGCGAAGCCACTAGGTTTGCACTGTTGACCACCAGCACGCAATCGCAAGATACGCAGTAATGCTAAACCATACTTATTTGACTTTGATGTTCTATCACTGGGTTAATGCCTGCTGCTACCTGACTTTTAGTCGCGAGCACAACGCTTCTTGGCTACACATATGCTGTTGGGAATGTTTTTTACACTTATTATGCTATAAATACCACTCCCACAGCTATTCGAATGACTCTAATACCTCTTGCAACTTGGACGACCGTAGTACGCATTCAGTCCGAGTACCAAGATAATGCTCTTTCTTCTGCCACTCGTCTAACTTCGTCGGCTCCGTGAACAAGCATTCTTCCTACTAGGCCATGGCGTCTACCGCTTCTTACATGGTAACCTGGAGGATATGGTGCGCACATGGAAAGGGCCGGGAAGTAACTCTGGCCTTCACAGAACAATAAGTTACAATTTGGGAACCAAATCTTTGTTAACCACTTCTATACCTCGTTCTAGGCCTACGTGAAACCCGAACCGAACTCAGCCTTCTTTCAAAGCTGGGTCTGATACGTGCTCTACAAGTGCCGTAATCCTGAAGTGCTGGGAACGCTCAAATCAGTAGTCTTCTTCTCTGGAAGTCGCGAGGGGGGGATTTTATCATGTCGAAGTTTGTTATTGGACTCATTCAACCATAGGCTCCATGATACTGAACCATCTTTAGTTACAGTACTGACCACCGCCATAGGGAGCACCAGCATAATGACTTTAGAAACCATTATTGAGTAGTCCTTTTTGCAGTGATCCTCATCAAATGCGGATACAATCAGGGGTTAATATGCGGGAAATGGGCTTAGGGATGATAGACACTTTACAAATTGCGCAAGCGATCGAGATGTTTTATGTATCGATATAGTATGCATTCTTATAGAATTGCCTCCTAGCGTGACAGAGACAAGCCTATCTATTCGCTCCTTCATCCTCCCATACCACGTGCGTACCTTTCCCGGCCATTCATTAAGACCGGAAGTACCTTGCTATACAATATTAAACCTTTAACAGCCTATCGCGCTGATACACGAATTAACCAAATGAAGTTTAGAGGATCAACCACTGTCATTTTTAAGCGGCTTCTTCAAGGTCGCATTCATATACCAATGATGACTTACTAAGGTTCTAAATGAGAGAATTCAATTAATCTGGATAGACAAAGGGGTCCGAAGATTCATAACGCCAGCCACTAAATGGGCGTTCCTCTGTGTACAGTAAGCCTTTATTTTTTAACCTTTGAAGAAACCGACAACACGACCCTTGCGAGTACAGTTATGAAAAGAAGAGATCTTCATCTTTGCCCCCCTATAATAGTACAGCTTCAAGCAATATTCTCAGTAAGATGGTACGTGTGGTACTAAGAACCGTGCTTCCTTCTTTTTGCGTTTTAACGCTACTTCAATTACCTACCATAATTATTTTGCCGCCCAAGTTGTCGCCAACCAAAGCGTTTTCTACATCGTTTCTTTAATTGCAAGAACGGATGTGGAATCCTTCGCAACACAACCACTTCTGCCGTGTAATCCGAGAGTGGCCACGATAATCGAAGGTATGGTCGACCGTTGTAGGTACCGCGTATGAAACGTAGATTCTAGTTGAAACGTTAATAGTTGCCGTTGGATTGAATATTTCTCCTCAATCGTATTAACCGTTTCTTCTTTGTTTATCTTTGTCGGCTTCTTTGAGTTCAGCTATTCTTTCCTTGGAAGTTTTTCGCCAAAAACAACAGACAGAACCTAAAGTCGCTTTCGTCCTCAGCAACTTCGTTTTCTTTATACAGGTTGTAACGTAGATACCACGGTAACCAGACTAAACCACGTCTAATTTCTGACCCAACTACTGGTCTAACTTCATGCTCATGAGTGCAGTGACAACTTACGTTTGTTACCGCCGAATGGTAATTGTTACTGAGCACGGCTAGAACGTTAACACTTTCTTGCACAACTCTCACATGACTAACTCCCACAACTTGCATTTGATAAACGTTCAAAGCTAGGACATTTTCATGGACTAGCGCTGAGCAAGAGACTAGTTCGACGTGCATAGGAGTTTCTGCATTGAATTCCTAATTAACGAGCCTTAAACTCTTTCATTTGCTGATGAGCATTATTGCGAGACTAGCTTGAGCTCGTATTGCCCGGTGTGTACTATTAGAAGTGAAAAAATCAGGGTTAATGTCTCGTCGCCTCATTTACATACAGATGGCCGGTGACACCTAGACGTATACTAGCAAAACGACATCTTAATTGAATTATTTATCTTACACATTCTTCCTAGATGACATGAATATGCTGGTCCGATGTATAATTGATGTTCCGATATAGGATAACAAACCTGAAACGTCCACGTCAATTACCTTTCAAGAATGTCTTGTGTCGACGTCGTCGTGCAGTAGGTCTAAATCCAGCGAATGATTTGTTTTGGCTTGTTCCGATGTAACGACTAGCATTACGATCGACCCAACCATTTCTTGCAGCGCAGTCAAAGTACGTTCCACCATGTTTACGCTAACCATCCTGTACTTTGTAAAGGAACTAGAGGTCCTCTTTATACTCTGTGGTTTGTGCAGCTCTTAAATGCAAACGACGAGTAAACAGGTGCGTGGGTGTATGGGGACCTTCATTTTTATGTATGATCGGATGGACTACGATCACAACCACTGTGTATGTAGATCACAATGACGTTGTCGTTTGCTTTAACATTGTCTCAACTAACGTTCATAGCGTTGAGGTGGACGTCTTCAATGAAAAAGTAGACAACCACTACATGACTTCAAATGGGGAAGCTGACCCGTAGTTCAGTAGTAACTTCTTCGATGTTCGTTGGATCATGTTTCGATACTCGTGTCACATTGTCCACGTCTTCGAATGCGTCGTCAACTTCTACTTCGTTTGCTTCTCAAGATGAAACATTGTTCACTTAGAGCACTAAATTGTAAGCAATTTAGCGAACGACTACGACAGCTTCGATGTCTCTTATCACTATTATTCTTCGTTATGGCACAACGTAGGAGGCGTGATAGATGTGACAGACATGACTGTCTAGGACATCGTCGTCTACTGGATGAACCATTTGAAATGCTTCGACTTATATGGGCATGTTGCCCACTTACCGTACTGGTTCGACTATTATAGAAGGGTCTTGACAGTCGAACACACTTCCATCCACTCCTAATTCTTGACCTTGTGCATATATAACATGAATACGAACATGTTGGATTCAGAAGTTATAGCAAATCCCACCCTAAACGTTTGGGGAAAGGCTTTAGCATTATATCCTAGCCTGTTGGAACACAAGCACCTTTCCCATGTAAACCCAGCGTCTTCACCACAATGAATACTCCCACCGATCGTTATTGCTTTTAGTACATGATGACACCATAACTGTGTCTGTCGCAATGTAAATGGGGGTGACAAGTTTTACCATTTGGTATGTTTTAGTTTACACATCACAAACTATTTCAACTAAACTCGCTACAACGTAGTAAACTCCTAGTCCACGCACCCGTTTTCGCTTCGATGTAAAGATTCATGTTAGTCTATCTGATGCTAATCTAATATACCCTAGGCACGCCGACAGAGCCATTATGTGAGCCTCTTACTGTTAGGTTAGGTGTTGTTCGATACTGGGTGACTGGCATTACCTCGTATTGCCCAGAGTGCGGTATTTAAAACGGTCAAATTAGGCCCTGAAAGTTGTAACGCCATCTGCACATTGTTGGCTGGTGACCGGTAGGTGTACAATAATATAAGGTATTCAAAATTGAATTAAATATGCTTTGCGCCCGTCCTACATGAGACAAACACAGTGGAACGATGCATGATTCTGCATTCGATCCAGGTTATGAGCGGGAACTCGTATTTAAAGTTTTTGTCGCTCAAAAACCTGAGCCTTCAACAACGTTTTGGGTGGGACTTGCGAACCCCTTGCCAAAGTCGTAATATAGGATTGGACAAACCTGTCTTCGTGGTAAGGGTGCAATTGGGACGCTGAAGTAGTGTAACTTATGAGGAAGGCTAATTATAACAAAAACTAAATTCCAGTGAGGTGGAAGATTGTGTTTTAAAGATGACTAATAAATATTGTTGTACATGCTCCTAATCGGTTCTACGGCTCGCGGGCACCAAAACCCATGACCTCTAAAATAGAGCTGAGTTTAGACGCGTGATTTCACTTAAGATTTCAATCTGTTCGTCTATTGTATCCAGAGATATACTGCATCCCCTATTAGTCTATCGATCTCGCATACAATGACTCAGACAAAGAACTCACTATGGAATCCGAGGATCGGGCGCCAACGATCGTTCCGATCAGAACATGAAAGCTATGTGGCCTGACGAATACTTCTCTCATTGTCTTTAGATAAAAGATCCCGCTGGAATAGGATCCAGTACTTTGTAAAGCAGGTTGAGAATCTTGTAATGTTTTGAAGATCATCGGACCAATCACGTCGTGTGTCGATAAAGGCATGTCGATGACTCGGCATGATATGCTACCTTCTACAATTATTGCTGTTTCGGTAGGGTTGGATATCATTGCGTATATTTCGAAATGTCGTTCGCATCCATGTTCATCCACCACGTAGCGGATAAATACACCAACTACCTGGTTGTAAATTTTGCAGCGTTAAGAACATCAATGGATCATAAAAATAAAACGTGCATCCTCTAGTAACAAAATCTAAGATCTAGACAAACTTCCAACTAGTCTGAACTTAGATTAAAGAGGTTTAGTAGGTACACGGACTCTGTCGTATATATTACTTTAAGTGAAATGTTTTCCAGTGTTGATCAATCCCTGAATAGCAAACGATTATAATGAGACTAGAGTGTAAACGTTAGCGACGACCGAGAGGTTCTTAGCGGCATCATAGTTACCTCTCGGCTCTAGTATCTCACAAATGGTCGCCGATCTGATAGATTGCTCGATAATCTCCGTGTGCTTTCGTCTGTATGGCGGACTTTATAAATCTAGTATCAGTCTGGTTTAAACGATGCTGAGCATAAGTGTGCTTGAAAACCGCCACATAAAGGGTAAATTCGAAAACAACGAGTGTCCTGTGAACCATATGCATAACTAGAGTACCCCGCACGCTAGCATGACACATGCCTCCGCAAGGCTATTCTTCGATACAGTATAAATAGATTCATTCGCCTATTTTTCTGTTTATATGCGTTATATTTACGTTGTCTTTAATTACCTGCCAGAGTTAAAGACATTCCATTGCGTGGGACCGGGTTTTCAGTAATTCGCTATATTAGCTTGAAGACCAGTTGGGCAAGACCCGACAAGTTGGTTGTGAATGCCCCCGAATAATTCTCCTAAAACTATGCCTGGGTGTTGGCAGCAGTCCATTGAAACTTCAGGCAGAAAGGCCTAGCCGGCTTAAGCGAGTGGAAAAACTTAGAAGCGTCCTGTATTGATTATCGAGGAAATACTTTCTCATTTGTGACGGATTTCCACCTCCCGGTTCTCAGGAAGGTTAAAGGTGTAATTACTATTGACGTGACTGCAGAGGAGAAGAGATCTTGTTTTCATTTTTTGGCGGTAACGTGATCCTGAATGGCGCTTATGACGGAGCAATGTATTTAACGTCGGAGTC";
	
		expect_true(SIRV2seq == fasta["SIRV2"]);
	}

	test_that("reverse complement is good") {
		std::string seq = "TTTATCTTGCGTATGGGCCTACGCTACTTACACGATACCTGGTATTCGTAATGGTCTTACCAAGCGTCTGCTGAAACGGTATTCCGAGGCGCTGCGTTAA";
		std::string rev = "TTAACGCAGCGCCTCGGAATACCGTTTCAGCAGACGCTTGGTAAGACCATTACGAATACCAGGTATCGTGTAAGTAGCGTAGGCCCATACGCAAGATAAA";

		expect_true(r_c(seq) == rev);
	}

	test_that("writing to output fasta executes appropriately") {
		std::string seq = "TTTATCTTGCGTATGGGCCTACGCTACTTACACGATACCTGGTATTCGTAATGGTCTTACCAAGCGTCTGCTGAAACGGTATTCCGAGGCGCTGCGTTAA";
		std::string chr = "SIRV5";
		std::string file = get_tempfile(".fa");
		std::ofstream out;
		out.open(file);
		write_fa(out, chr, seq, 50);
		out.close();

		std::unordered_map<std::string, std::string> map = get_fa_simple(file);
		expect_true(map[chr] == seq);
	}
}